

throw: 例外を意図的に起こして、例外処理を行わせる
throws: メソッド内で例外が発生した場合、自信のメソッド内でcatchするのではなく、呼ばれる側に例外を投げる処理

例外機構の特性：
ーーーーーーーーーーーーーーーーーーーー
■メソッド呼び出しの異常系を特殊な戻り値で表現するこのコードには大きな問題
①createItem()呼び出し元が異常系の処理を実装し忘れる。
②戻り値が空であることがわかるだけで実際に何が異常系だったか呼び出し元では分からない。
Item item = createItem();
if (item == null) {
    // 異常系
} else {
    // 正常系
}
ーーーーーーーーーーーーーーーーーーーー
■例外機構の導入
①呼び出し元に異常系の処理を明示的に実装するように誘導できる
②catch 節で捕捉した例外のメッセージやスタックトレースにより、呼び出し元で異常の詳細を把握できる。
try {
    Item item = createItem();
    // 正常系
    ...
} catch (ItemCreationException e) {
    // 異常系
    ...
}
ーーーーーーーーーーーーーーーーーーーー

検査例外（Exceptionから継承）：呼び出し元に何らかの対処を強制する例外
非検査例外（ RuntimeExceptionから継承）：検査例外のような呼び出し元での対処が強制されない例外

コンパイルを通すために検査例外を catch したらどうすべきか、入門者レベルではこの RuntimeException にラップして送出する方法
try {
    List<String> lines = Files.readAllLines(Paths.get("items.csv"));
    // 正常系
    ...
} catch (IOException e) {
    throw new RuntimeException(e); // 非検査例外にラップして送出する
}















